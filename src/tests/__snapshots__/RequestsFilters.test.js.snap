// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`renders RequestFilters component with filters props 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <RequestsFilters
    filters={
      Object {
        "status": false,
        "text": "Name0",
      }
    }
    setStatusFilter={[MockFunction]}
    setTextFilter={[MockFunction]}
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "checkPropTypes": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": Array [
        <input
          onChange={[Function]}
          placeholder="Search By Satellite..."
          type="text"
          value="Name0"
        />,
        <label
          htmlFor="status"
        >
          Show: 
        </label>,
        <select
          id="status"
          onChange={[Function]}
        >
          <option
            value="all"
          >
            All
          </option>
          <option
            value="new"
          >
            New
          </option>
          <option
            value="done"
          >
            Done
          </option>
        </select>,
      ],
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "onChange": [Function],
          "placeholder": "Search By Satellite...",
          "type": "text",
          "value": "Name0",
        },
        "ref": null,
        "rendered": null,
        "type": "input",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": "Show: ",
          "htmlFor": "status",
        },
        "ref": null,
        "rendered": "Show: ",
        "type": "label",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            <option
              value="all"
            >
              All
            </option>,
            <option
              value="new"
            >
              New
            </option>,
            <option
              value="done"
            >
              Done
            </option>,
          ],
          "id": "status",
          "onChange": [Function],
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": "All",
              "value": "all",
            },
            "ref": null,
            "rendered": "All",
            "type": "option",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": "New",
              "value": "new",
            },
            "ref": null,
            "rendered": "New",
            "type": "option",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": "Done",
              "value": "done",
            },
            "ref": null,
            "rendered": "Done",
            "type": "option",
          },
        ],
        "type": "select",
      },
    ],
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <input
            onChange={[Function]}
            placeholder="Search By Satellite..."
            type="text"
            value="Name0"
          />,
          <label
            htmlFor="status"
          >
            Show: 
          </label>,
          <select
            id="status"
            onChange={[Function]}
          >
            <option
              value="all"
            >
              All
            </option>
            <option
              value="new"
            >
              New
            </option>
            <option
              value="done"
            >
              Done
            </option>
          </select>,
        ],
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "onChange": [Function],
            "placeholder": "Search By Satellite...",
            "type": "text",
            "value": "Name0",
          },
          "ref": null,
          "rendered": null,
          "type": "input",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": "Show: ",
            "htmlFor": "status",
          },
          "ref": null,
          "rendered": "Show: ",
          "type": "label",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              <option
                value="all"
              >
                All
              </option>,
              <option
                value="new"
              >
                New
              </option>,
              <option
                value="done"
              >
                Done
              </option>,
            ],
            "id": "status",
            "onChange": [Function],
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": "All",
                "value": "all",
              },
              "ref": null,
              "rendered": "All",
              "type": "option",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": "New",
                "value": "new",
              },
              "ref": null,
              "rendered": "New",
              "type": "option",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": "Done",
                "value": "done",
              },
              "ref": null,
              "rendered": "Done",
              "type": "option",
            },
          ],
          "type": "select",
        },
      ],
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getChildContext": Object {
            "calledByRenderer": false,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;
